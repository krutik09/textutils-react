{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","class","href","name","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","role","onClick","togglemode","for","defaultProps","sitename","Textform","_useState","useState","_useState2","Object","slicedToArray","text","settext","htmlFor","heading","value","onChange","event","target","rows","cols","console","log","toUpperCase","showslert","document","getElementsByClassName","style","display","toLowerCase","newtext","split","join","navigator","clipboard","writeText","length","Alert","alert","word","charAt","slice","msg","App","darkmode","setdarkmode","_useState3","_useState4","setalert","setTimeout","body","backgroundColor","color","Textform_Textform","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.0eef65bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport About from \"./About\";\r\nimport {Link} from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-${props.mode} navbar-expand-lg bg-${props.mode}`}>\r\n  <div class=\"container-fluid\">\r\n                <a class=\"navbar-brand\" href=\"#\">{props.name}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href= \"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to = \"/About\">About</Link>\r\n        </li> */}\r\n            </ul>\r\n            <div class={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n  <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode}/>\r\n  <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">Toggle dark mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    );\r\n   \r\n   \r\n    \r\n};\r\n\r\nNavbar.propTypes = {\r\n    name: PropTypes.string,\r\n    sitename:PropTypes.string\r\n}\r\n \r\nNavbar.defaultProps = {\r\n    name: 'krutik',\r\n    sitename:'textutils'\r\n }\r\n\r\n","import React, { useState } from 'react';\r\nimport './Textform.css'\r\nimport PropTypes from 'prop-types';\r\nexport default function Textform(props) {\r\n     const cleartxt = () => { \r\n         settext('');\r\n         props.showslert(\"cleared text\", \"warning\");\r\n    }\r\n    const convert = () => { \r\n        console.log(\"converting to uppercase\");\r\n        settext(text.toUpperCase())\r\n        props.showslert(\"converted to upper case\", \"success\");\r\n        document.getElementsByClassName(\"textdiv\").style.display = \"block\";\r\n    \r\n    }\r\n      const convertlower = () => { \r\n        console.log(\"converting to uppercase\");\r\n          settext(text.toLowerCase())\r\n           props.showslert(\"converted to lower case\", \"success\");\r\n        document.getElementsByClassName(\"textdiv\").style.display = \"block\";\r\n   \r\n      }\r\n    const change = (event) => { \r\n        settext(event.target.value) //event parameter is ddefualt passed onchange\r\n\r\n    }\r\n    const removespace = () => { \r\n        let newtext = text.split(/[ ]+/);\r\n        props.showslert(\"extra space removed\", \"success\");\r\n        settext(newtext.join(\" \"));\r\n\r\n    }\r\n    const copy = () => { \r\n        // var gettext = document.getElementById(\"myinput\");\r\n        // gettext.select();\r\n        // gettext.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(text);\r\n         props.showslert(\"copied to clipboard\", \"success\");\r\n    }\r\n    const [text, settext] = useState('');//right way\r\n    //text = \"krutikkrutikrjr\"// wrong way to change the state use setetxt function to change the value of etxt\r\n    //settext('new twxt'); //correct way\r\n    return (\r\n        <div className='myapp'>\r\n            <label htmlFor=\"myinput\" class=\"form-label\"><h1>{props.heading}</h1></label>  \r\n        <div className=\"input-group mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={change} aria-label=\"With textarea\" id='myinput' rows={8} cols={50}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={convert}>convert to uppercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={convertlower}>convert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={cleartxt}>clear text</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={removespace}>remove extra space</button>\r\n              <button className=\"btn btn-primary mx-2 my-2\" onClick={copy}>copy to clipboard</button>\r\n            <div className=\"textdiv\">\r\n                <h1>Your text Summary</h1>\r\n                <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n                <p>{(text.split(\" \").length) * 0.008} minutes to read</p>\r\n                <h1>Preview</h1>\r\n                <p>{text===''?\"enter the text to preview\":text}</p>\r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nexport default function Alert(props) {\r\n    function capitalize(word) { \r\n        return word.charAt().toUpperCase() + word.slice(1);\r\n    }\r\n    return (\r\n        props.alert&&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)},</strong>{props.alert.msg}\r\n</div>\r\n    );\r\n    \r\n};\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport About from './components/About';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\nimport React from 'react';\nimport {BrowserRouter,Routes,Route} from 'react-router-dom';\nfunction App() {\n  const [darkmode, setdarkmode] = useState('light');\n  const [alert, setalert] = useState(null);\n  const showslert = (msg, type) => { \n    setalert({\n      msg: msg,\n      type: type\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  }\n  const togglemode = () => { \n    if (darkmode === 'light') {\n      setdarkmode('dark')\n      document.body.style.backgroundColor = 'grey';\n      document.body.style.color = 'white';\n      showslert(\"dark mode ennabled\", \"success\");\n    }\n    else { \n      setdarkmode('light')\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      // showslert(\"light mode ennabled\",\"warning\")\n    }\n  }\n  return (\n    <div className=\"App\">\n      <Navbar mode={darkmode} togglemode={togglemode} name=\"TextUtils\"></Navbar>\n      <Alert alert={ alert}/>\n      <Textform heading=\"Enter text\" showslert={showslert}/>\n      {/* <BrowserRouter>\n     \n      <Routes>\n      <Route exact path='/' element={<Textform/>}>  </Route>\n      <Route exact path='/About' element={<About/>}></Route>\n      </Routes>\n      </BrowserRouter> */}\n     \n      {/* <div className=\"container\"> */}\n        {/* <Textform heading=\"Enter about you\" showslert={showslert} /> \n        <About/> */}\n      </div>\n    // </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}