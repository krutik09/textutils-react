{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","mystyle","setmystyle","_useState3","_useState4","label","setlabel","react_default","a","createElement","className","style","class","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","props","concat","mode","href","name","aria-label","react_router_dom","to","role","togglemode","for","defaultProps","sitename","Textform","text","settext","htmlFor","heading","value","onChange","event","target","rows","cols","console","log","toUpperCase","showslert","document","getElementsByClassName","display","toLowerCase","newtext","split","join","navigator","clipboard","writeText","length","Alert","alert","word","charAt","slice","msg","App","darkmode","setdarkmode","setalert","body","setTimeout","react_router","exact","path","element","Textform_Textform","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.df5fd5c2.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport default function About() {\r\n  const [mystyle, setmystyle] = useState({\r\n    color: 'black',\r\n    backgroundColor: 'white'\r\n  });\r\n  const [label, setlabel] = useState('Enable dark mode');\r\n   let togglestyle = () => { \r\n     if (mystyle.color === 'white') {\r\n        setlabel('Enable dark mode');\r\n       setmystyle({\r\n         color: 'black',\r\n         backgroundColor: 'white'\r\n       });\r\n      \r\n     }\r\n     else { \r\n       setlabel('Enable light mode');\r\n       setmystyle({\r\n         color: 'white',\r\n         backgroundColor: 'black'\r\n       });\r\n          \r\n     }\r\n  }\r\n    return (\r\n      <div className=\"container\" style={mystyle}>\r\n        <h2 >About us</h2>\r\n            <div class=\"accordion\" id=\"accordionExample\">\r\n  <div class=\"accordion-item\" style={mystyle}>\r\n    <h2 class=\"accordion-header\" id=\"headingOne\" style={mystyle}>\r\n      <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={mystyle}>\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\" id=\"headingTwo\">\r\n      <button class=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\" id=\"headingThree\">\r\n      <button class=\"accordion-button collapsed\" style={mystyle}type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n        </div>\r\n        <button className=\"btn btn-primary my-2\" onClick={togglestyle}>{ label}</button>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport About from \"./About\";\r\nimport {Link} from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-${props.mode} navbar-expand-lg bg-${props.mode}`}>\r\n  <div class=\"container-fluid\">\r\n                <a class=\"navbar-brand\" href=\"#\">{props.name}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to= \"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to = \"/About\">About</Link>\r\n        </li>\r\n            </ul>\r\n            <div class={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n  <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode}/>\r\n  <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">Toggle dark mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    );\r\n   \r\n   \r\n    \r\n};\r\n\r\nNavbar.propTypes = {\r\n    name: PropTypes.string,\r\n    sitename:PropTypes.string\r\n}\r\n \r\nNavbar.defaultProps = {\r\n    name: 'krutik',\r\n    sitename:'textutils'\r\n }\r\n\r\n","import React, { useState } from 'react';\r\nimport './Textform.css'\r\nimport PropTypes from 'prop-types';\r\nexport default function Textform(props) {\r\n     const cleartxt = () => { \r\n         settext('');\r\n         props.showslert(\"cleared text\", \"warning\");\r\n    }\r\n    const convert = () => { \r\n        console.log(\"converting to uppercase\");\r\n        settext(text.toUpperCase())\r\n        props.showslert(\"converted to upper case\", \"success\");\r\n        document.getElementsByClassName(\"textdiv\").style.display = \"block\";\r\n    \r\n    }\r\n      const convertlower = () => { \r\n        console.log(\"converting to uppercase\");\r\n          settext(text.toLowerCase())\r\n           props.showslert(\"converted to lower case\", \"success\");\r\n        document.getElementsByClassName(\"textdiv\").style.display = \"block\";\r\n   \r\n      }\r\n    const change = (event) => { \r\n        settext(event.target.value) //event parameter is ddefualt passed onchange\r\n\r\n    }\r\n    const removespace = () => { \r\n        let newtext = text.split(/[ ]+/);\r\n        props.showslert(\"extra space removed\", \"success\");\r\n        settext(newtext.join(\" \"));\r\n\r\n    }\r\n    const copy = () => { \r\n        // var gettext = document.getElementById(\"myinput\");\r\n        // gettext.select();\r\n        // gettext.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(text);\r\n         props.showslert(\"copied to clipboard\", \"success\");\r\n    }\r\n    const [text, settext] = useState('');//right way\r\n    //text = \"krutikkrutikrjr\"// wrong way to change the state use setetxt function to change the value of etxt\r\n    //settext('new twxt'); //correct way\r\n    return (\r\n        <div className='myapp'>\r\n            <label htmlFor=\"myinput\" class=\"form-label\"><h1>{props.heading}</h1></label>  \r\n        <div className=\"input-group mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={change} aria-label=\"With textarea\" id='myinput' rows={8} cols={50}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={convert}>convert to uppercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={convertlower}>convert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={cleartxt}>clear text</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={removespace}>remove extra space</button>\r\n              <button className=\"btn btn-primary mx-2 my-2\" onClick={copy}>copy to clipboard</button>\r\n            <div className=\"textdiv\">\r\n                <h1>Your text Summary</h1>\r\n                <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n                <p>{(text.split(\" \").length) * 0.008} minutes to read</p>\r\n                <h1>Preview</h1>\r\n                <p>{text===''?\"enter the text to preview\":text}</p>\r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nexport default function Alert(props) {\r\n    function capitalize(word) { \r\n        return word.charAt().toUpperCase() + word.slice(1);\r\n    }\r\n    return (\r\n        props.alert&&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)},</strong>{props.alert.msg}\r\n</div>\r\n    );\r\n    \r\n};\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport About from './components/About';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\nimport React from 'react';\nimport {BrowserRouter,Routes,Route} from 'react-router-dom';\nfunction App() {\n  const [darkmode, setdarkmode] = useState('light');\n  const [alert, setalert] = useState(null);\n  const showslert = (msg, type) => { \n    setalert({\n      msg: msg,\n      type: type\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  }\n  const togglemode = () => { \n    if (darkmode === 'light') {\n      setdarkmode('dark')\n      document.body.style.backgroundColor = 'grey';\n      document.body.style.color = 'white';\n      showslert(\"dark mode ennabled\", \"success\");\n    }\n    else { \n      setdarkmode('light')\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      // showslert(\"light mode ennabled\",\"warning\")\n    }\n  }\n  return (\n    <div className=\"App\">\n      \n     \n      {/* <Textform heading=\"Enter text\" showslert={showslert}/> */}\n      <BrowserRouter>\n      <Navbar mode={darkmode} togglemode={togglemode} name=\"TextUtils\"></Navbar>\n      <Alert alert={ alert}/>\n      <Routes>\n      <Route exact path='/' element={<Textform/>}>  </Route>\n      <Route exact path='/About' element={<About/>}></Route>\n      </Routes>\n      </BrowserRouter>\n     \n      {/* <div className=\"container\"> */}\n        {/* <Textform heading=\"Enter about you\" showslert={showslert} /> \n        <About/> */}\n      </div>\n    // </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}